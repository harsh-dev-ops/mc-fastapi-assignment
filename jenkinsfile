pipeline {

  agent {
    kubernetes {
      yamlFile 'k8s/kaniko-builder.yaml'
    }
  }

  environment {
        APP_NAME = "mc-fastapi-assignment"
        RELEASE = "1.0.0"
        DOCKER_USER = "harsh8383"
        DOCKER_PASS = 'dockerhub'
        IMAGE_NAME = "${DOCKER_USER}" + "/" + "${APP_NAME}"
        IMAGE_TAG = "${RELEASE}-${BUILD_NUMBER}"
        /* JENKINS_API_TOKEN = credentials("JENKINS_API_TOKEN") */

    }

  stages {

    stage("Cleanup Workspace") {
      steps {
        cleanWs()
      }
    }

    stage("Checkout from SCM"){
            steps {
                git branch: 'dev', credentialsId: 'github', url: 'https://github.com/harsh-dev-ops/mc-fastapi-assignment'
            }
        }

    stage('Kaniko: Build & Push the test image') {
      steps {
        container(name: 'kaniko', shell: '/busybox/sh') {
          sh """
          #!/busybox/sh

            /kaniko/executor --dockerfile `pwd`/docker/dockerfile.prod --context `pwd` --destination=${IMAGE_NAME}:${IMAGE_TAG}
          """

          sh """
          kubectl run nginx-test --image=nginx 
          """
        }
    }
    }

    stage('Kubernetes: Pull & Test the app') {
        steps {
            container(name: 'kaniko', shell: '/busybox/sh') {
                script {
                    // Create test pod using kubectl run with correct syntax
                    sh """
                    kubectl run ${APP_NAME}-test-${BUILD_NUMBER} \
                    --image=${IMAGE_NAME}:${IMAGE_TAG} \
                    --restart=Never \
                    --image-pull-policy=Always \
                    --overrides='{
                        "spec": {
                        "imagePullSecrets": [{"name": "dockercred"}],
                        "containers": [{
                            "name": "test-runner",
                            "command": ["python3", "-m", "pytest"],
                            "resources": {
                            "requests": {"memory": "256Mi", "cpu": "250m"},
                            "limits": {"memory": "512Mi", "cpu": "500m"}
                            }
                        }]
                        }
                    }'
                    """
                    
                    // Wait for completion
                    sh "kubectl wait --for=condition=Complete pod/${APP_NAME}-test-${BUILD_NUMBER} --timeout=300s"
                    
                    // Get logs
                    echo "=== TEST OUTPUT ==="
                    sh "kubectl logs ${APP_NAME}-test-${BUILD_NUMBER}"
                    
                    // Check exit code
                    def exitCode = sh(
                        script: "kubectl get pod ${APP_NAME}-test-${BUILD_NUMBER} -o jsonpath='{.status.containerStatuses[0].state.terminated.exitCode}'",
                        returnStdout: true
                    ).trim()
                    
                    if (exitCode != "0") {
                        error("Tests failed with exit code: ${exitCode}")
                    }
                }
            }
        }
        post {
            always {
                container(name: 'kaniko', shell: '/busybox/sh') {
                    sh "kubectl delete pod ${APP_NAME}-test-${BUILD_NUMBER} --ignore-not-found=true --timeout=30s"
                }
            }
        }
    }

    stage('Kaniko: Build & Push the Production Image'){
        steps {
        container(name: 'kaniko', shell: '/busybox/sh') {
          sh '''#!/busybox/sh
            /kaniko/executor --dockerfile `pwd`/docker/dockerfile.prod --context `pwd` --destination=${IMAGE_NAME}:latest
          '''
        }
    }

      }
    }
}
